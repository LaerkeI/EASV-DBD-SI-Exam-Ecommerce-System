services:

  jenkins:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jenkins
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock # To allow Jenkins to build and manage Docker containers, map the Docker socket into the Jenkins container. This provides Jenkins access to Docker commands.
    networks:
      - ecommerce-network

  rabbitmq:
    image: "rabbitmq:3.12-management"
    container_name: "rabbitmq"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - ecommerce-network

  order-management-service:
    image: laerkeimeland/order-management-service:${TAG:-latest} # For dynamic tagging
    build:
      context: .
      dockerfile: OrderManagementService/Dockerfile
    container_name: "order-management-service"
    ports:
      - "8000:80"
    depends_on:
      - rabbitmq
      - inventory-management-service
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASS: guest
    networks:
      - ecommerce-network

  inventory-management-service:
    image: laerkeimeland/inventory-management-service:${TAG:-latest} # For dynamic tagging
    build:
      context: .
      dockerfile: InventoryManagementService/Dockerfile
    container_name: "inventory-management-service"
    ports:
      - "8001:80"
    depends_on:
      - rabbitmq
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASS: guest
    networks:
    - ecommerce-network
    

networks:
  ecommerce-network:
    driver: bridge

volumes:
  jenkins_home: